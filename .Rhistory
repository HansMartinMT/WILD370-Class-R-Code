)+
ggtitle("Elk Use and Availability of Different Landcover Variables") +
labs(x="Landcover Type",y="Density",fill = "")+
scale_fill_manual(labels = c("Available", "Used"), values = c("grey3", "grey50"))
par(mfrow=c(1,1)) ## note need to reset graphical parameter to 1x1
## first analyze data incorrectly using linear regression
naiveelevation <- lm(used~elevation, #specify the model-use (y-axis ie independent variable) as a function of elevation (x-axis ie independent variable)
data = elkdata) #data used to fit the model
summary(naiveelevation) #output of the model.
naive_yhat <-predict(naiveelevation, #predict() is a function that allows us to use model coefficients (the effect of x on y) to predict new y values.
type="response") #type specifies that we want predicted 'y' values.
plot(elkdata$elevation, elkdata$used)#plot the actual observed data. (note that it only occurs at 0 and 1)
lines(elkdata$elevation, naive_yhat, add=TRUE) #plot the estimated probability of use
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation = seq(0,4000,10) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(0,4000), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
Forage_model<-glm(used_factor~totalbiomass, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
totalbiomass = seq(min(elkdata$totalbiomass,na.rm=T),max(elkdata$totalbiomass,na.rm=T),10) #create a new forage data which spreads from the minimum found in the data to the maximum found in the data by 10's
pred_totalbiomass = predict(Forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(totalbiomass) #the new data we want the model to use to predict probability of use
)
plot(elkdata$totalbiomass, #observed elevation
elkdata$used, #observed use (o or 1)
xlab="Total Biomass", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(totalbiomass,#dependent variable (x-axis)
pred_totalbiomass, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
landcover_model<-glm(used_factor~landcover_type-1,
data=elkdata,
family=binomial(link="logit"))
summary(landcover_model)
coef(landcover_model)
Landcover_elevation_forage_model<-glm(used_factor~elevation+totalbiomass+landcover_type-1,
data=elkdata,
family=binomial(link="logit"))
AIC(landcover_model,Landcover_elevation_forage_model,Forage_model,Elevation_model)
AIC_Table<-AIC(landcover_model,Landcover_elevation_forage_model,Forage_model,Elevation_model)
str(AIC_Table)
AIC_Table[order(-AIC),]
AIC_Table[order(AIC),]
AIC_Table[order(AIC_Table$AIC),]
elkusedavail_studyareacomplete<-read.csv("elkused_avail_studyarea.csv")
pred_use<-predict(Landcover_elevation_forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = elkusedavail_studyareacomplete #the new data we want the model to use to predict probability of use
)
elkusedavail_studyareacomplete$predicted_pr_use<-predict(Landcover_elevation_forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = elkusedavail_studyareacomplete #the new data we want the model to use to predict probability of use
)
ggplot(elkdata,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')
elkusedavail_studyareacomplete$predicted_pr_use<-predict(Landcover_elevation_forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = elkusedavail_studyareacomplete #the new data we want the model to use to predict probability of use
)
ggplot(elkdata,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')
elkusedavail_studyareacomplete<-read.csv("elkused_avail_studyarea.csv")
elkusedavail_studyareacomplete<-read.csv("elkused_avail_studyarea.csv")
nrow(elkusedavail_studyareacomplete)
elkusedavail_studyareacomplete1<-elkusedavail_studyareacomplete[complete.cases(elkusedavail_studyareacomplete[,1:6]),]
nrow(elkusedavail_studyareacomplete1)
elkusedavail_studyareacomplete<-read.csv("elkused_avail_studyarea.csv")
elkusedavail_studyareacomplete<-elkusedavail_studyareacomplete[complete.cases(elkusedavail_studyareacomplete[,1:6]),]
elkusedavail_studyareacomplete$predicted_pr_use<-predict(Landcover_elevation_forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = elkusedavail_studyareacomplete #the new data we want the model to use to predict probability of use
)
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18)
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18)
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18, col="black")
ggplot(elkusedavail_studyareacomplete,
aes(Easting, Northing, col = predicted_pr_use)
) +
geom_point(size=3) +
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18, size=0.5, col="black")
ggplot(elkusedavail_studyareacomplete,
aes(x = Easting,
y = Northing,
col = predicted_pr_use #color based on the probability of use
)
) +
geom_point(size=2) + #use geom_point size 3
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18, size=0.5, col="black")
ggplot(elkusedavail_studyareacomplete,
aes(x = Easting,
y = Northing,
col = predicted_pr_use #color based on the probability of use
)
) +
geom_point(size=2) + #use geom_point size 3
#coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18, size=0.5, col="black")
ggplot(elkusedavail_studyareacomplete,
aes(x = Easting,
y = Northing,
col = predicted_pr_use #color based on the probability of use
)
) +
geom_point(size=2) + #use geom_point size 3
coord_equal() +
scale_colour_gradient(low = 'yellow', high = 'red')+ #scale the color so that red is a high probability of use and yellow is low probability of use
geom_point(data = elkusedavail_studyareacomplete[elkusedavail_studyareacomplete$used==1,], shape=18, size=0.5, col="black") #include points of actual use.
origyhtelk<-read.csv("C:/Users/Hans Martin/Desktop/YaHaTinda/YHTAnalysis/All_GPS_elk_12Jan2017.csv",header=T)
origyhtelk<-read.csv("C:/Users/Hans Martin/Desktop/YaHaTinda/YHTAnalysis/All_GPS_elk_12Jan2017.csv",header=T)
```
AIC_Table<-AIC_Table[order(AIC_Table$AIC),]
AIC_Table<-AIC(landcover_model,Landcover_elevation_forage_model,Forage_model,Elevation_model)
#order the table based on AIC value. The model with the lowest AIC is the model that best describes the data
AIC_Table<-AIC_Table[order(AIC_Table$AIC),]
AIC_Table
tapply(elkdata$elevation, list(Elevation=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$totalbiomass, list(TotalForageBiomass=elkdata$used_factor), mean, na.rm=TRUE)
par(mfrow=c(1,2)) #this function plots the next two called plots next to each other
boxplot(elevation~used_factor, #plot elevation by use / available
ylab="Elevation", #label for the y axis
xlab="USEDfactor", #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
boxplot(totalbiomass~used_factor, #plot total biomass by use / available
ylab="Total Forage Biomass", #label for the y axis
xlab="USEDfactor",  #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
ggplot(
elkdata, #data to be used
aes(
x=landcover_type, #column in the dataframe with categorical data
fill=used_factor #compares summer to winter values
)
)+
geom_bar(
aes(
y=(..count..)/sum(..count..) #column in the dataframe with categorical data
#fill=as.factor(summer) # this equation plots the % use instead of frequency
)
)+
ggtitle("Elk Use and Availability of Different Landcover Variables") +
labs(x="Landcover Type",y="Density",fill = "")+
scale_fill_manual(labels = c("Available", "Used"), values = c("grey3", "grey50"))
par(mfrow=c(1,1)) ## note need to reset graphical parameter to 1x1
## first analyze data incorrectly using linear regression
naiveelevation <- lm(used~elevation, #specify the model-use (y-axis ie independent variable) as a function of elevation (x-axis ie independent variable)
data = elkdata) #data used to fit the model
summary(naiveelevation) #output of the model.
naive_yhat <-predict(naiveelevation, #predict() is a function that allows us to use model coefficients (the effect of x on y) to predict new y values.
type="response") #type specifies that we want predicted 'y' values.
plot(elkdata$elevation, elkdata$used)#plot the actual observed data. (note that it only occurs at 0 and 1)
lines(elkdata$elevation, naive_yhat, add=TRUE) #plot the estimated probability of use
elkdata$Elevation<-elkdata$elevation
elkdata$TotalBiomass<-elkdata$totalbiomass
elkdata$elevation<-scale(elkdata$Elevation)
elkdata$totalbiomass<-scale(elkdata$TotalBiomass)
elkusedavail_studyareacomplete<-read.csv("elkused_avail_studyarea.csv")
elkusedavail_studyareacomplete<-elkusedavail_studyareacomplete[complete.cases(elkusedavail_studyareacomplete[,1:6]),]
elkusedavail_studyareacomplete$Elevation<-elkusedavail_studyareacomplete$elevation
elkusedavail_studyareacomplete$TotalBiomass<-elkusedavail_studyareacomplete$totalbiomass
elkusedavail_studyareacomplete$elevation<-scale(elkusedavail_studyareacomplete$Elevation)
elkusedavail_studyareacomplete$totalbiomass<-scale(elkusedavail_studyareacomplete$TotalBiomass)
#function to install and load required packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#load or install these packages:
packages <- c("Rcpp","jsonlite","ks", "lattice", "plotrix", "adehabitatHR", "maptools", "foreign", "rgdal", "sp", "raster","ggplot2","colorRamps","rgeos","leaflet","lubridate", "htmlwidgets","move","tmap","tmaptools","lme4")
#run function to install packages
ipak(packages)
elkdata<-read.csv( "elkusedavail_kde.csv")
elkdata<-elkdata[complete.cases(elkdata[,4:6]),]
elkdata$Elevation<-elkdata$elevation
elkdata$TotalBiomass<-elkdata$totalbiomass
elkdata$elevation<-scale(elkdata$Elevation)
elkdata$totalbiomass<-scale(elkdata$TotalBiomass)
elkdata$used_factor<-factor(elkdata$used, labels=c('0','1'))
colnames(elkdata)
tapply(elkdata$elevation, list(Elevation=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$totalbiomass, list(TotalForageBiomass=elkdata$used_factor), mean, na.rm=TRUE)
par(mfrow=c(1,2)) #this function plots the next two called plots next to each other
boxplot(elevation~used_factor, #plot elevation by use / available
ylab="Elevation", #label for the y axis
xlab="USEDfactor", #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
boxplot(totalbiomass~used_factor, #plot total biomass by use / available
ylab="Total Forage Biomass", #label for the y axis
xlab="USEDfactor",  #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
ggplot(
elkdata, #data to be used
aes(
x=landcover_type, #column in the dataframe with categorical data
fill=used_factor #compares summer to winter values
)
)+
geom_bar(
aes(
y=(..count..)/sum(..count..) #column in the dataframe with categorical data
#fill=as.factor(summer) # this equation plots the % use instead of frequency
)
)+
ggtitle("Elk Use and Availability of Different Landcover Variables") +
labs(x="Landcover Type",y="Density",fill = "")+
scale_fill_manual(labels = c("Available", "Used"), values = c("grey3", "grey50"))
par(mfrow=c(1,1)) ## note need to reset graphical parameter to 1x1
## first analyze data incorrectly using linear regression
naiveelevation <- lm(used~elevation, #specify the model-use (y-axis ie independent variable) as a function of elevation (x-axis ie independent variable)
data = elkdata) #data used to fit the model
summary(naiveelevation) #output of the model.
naive_yhat <-predict(naiveelevation, #predict() is a function that allows us to use model coefficients (the effect of x on y) to predict new y values.
type="response") #type specifies that we want predicted 'y' values.
plot(elkdata$elevation, elkdata$used)#plot the actual observed data. (note that it only occurs at 0 and 1)
lines(elkdata$elevation, naive_yhat, add=TRUE) #plot the estimated probability of use
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation = seq(0,4000,10) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
elevation = seq(0,1,100) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
elkdata<-read.csv( "elkusedavail_kde.csv")
elkdata<-elkdata[complete.cases(elkdata[,4:6]),]
elkdata$Elevation<-elkdata$elevation
elkdata$TotalBiomass<-elkdata$totalbiomass
elkdata$elevation<-scale(elkdata$Elevation)
elkdata$totalbiomass<-scale(elkdata$TotalBiomass)
elkdata$used_factor<-factor(elkdata$used, labels=c('0','1'))
colnames(elkdata)
tapply(elkdata$elevation, list(Elevation=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$totalbiomass, list(TotalForageBiomass=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$Elevation, list(Elevation=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$TotalBiomass, list(TotalForageBiomass=elkdata$used_factor), mean, na.rm=TRUE)
par(mfrow=c(1,2)) #this function plots the next two called plots next to each other
boxplot(Elevation~used_factor, #plot elevation by use / available
ylab="Elevation", #label for the y axis
xlab="USEDfactor", #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
boxplot(TotalBiomass~used_factor, #plot total biomass by use / available
ylab="Total Forage Biomass", #label for the y axis
xlab="USEDfactor",  #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
ggplot(
elkdata, #data to be used
aes(
x=landcover_type, #column in the dataframe with categorical data
fill=used_factor #compares summer to winter values
)
)+
geom_bar(
aes(
y=(..count..)/sum(..count..) #column in the dataframe with categorical data
#fill=as.factor(summer) # this equation plots the % use instead of frequency
)
)+
ggtitle("Elk Use and Availability of Different Landcover Variables") +
labs(x="Landcover Type",y="Density",fill = "")+
scale_fill_manual(labels = c("Available", "Used"), values = c("grey3", "grey50"))
par(mfrow=c(1,1)) ## note need to reset graphical parameter to 1x1
## first analyze data incorrectly using linear regression
naiveelevation <- lm(used~elevation, #specify the model-use (y-axis ie independent variable) as a function of elevation (x-axis ie independent variable)
data = elkdata) #data used to fit the model
summary(naiveelevation) #output of the model.
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation = seq(0,1,100) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
elevation = seq(0,1,100) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = elevation #the new data we want the model to use to predict probability of use
)
str(elevation)
elevation = seq(0,1,100) #create a new elevation data which spreads from 0m to 4,000m by 10's
elevation = seq(min(elkdata$elevation),max(elkdata$elevation),0.1) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation
elevation = seq(min(elkdata$elevation),max(elkdata$elevation),0.1) #create a new elevation data which spreads from 0m to 4,000m by 10's
#function to install and load required packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#load or install these packages:
packages <- c("Rcpp","jsonlite","ks", "lattice", "plotrix", "adehabitatHR", "maptools", "foreign", "rgdal", "sp", "raster","ggplot2","colorRamps","rgeos","leaflet","lubridate", "htmlwidgets","move","tmap","tmaptools","lme4")
#run function to install packages
ipak(packages)
elkdata<-read.csv( "elkusedavail_kde.csv")
elkdata<-elkdata[complete.cases(elkdata[,4:6]),]
elkdata$Elevation<-elkdata$elevation
elkdata$TotalBiomass<-elkdata$totalbiomass
elkdata$elevation<-scale(elkdata$Elevation)
elkdata$totalbiomass<-scale(elkdata$TotalBiomass)
elkdata$used_factor<-factor(elkdata$used, labels=c('0','1'))
elkdata$used_factor<-factor(elkdata$used, labels=c('0','1'))
colnames(elkdata)
tapply(elkdata$Elevation, list(Elevation=elkdata$used_factor), mean, na.rm=TRUE)
tapply(elkdata$TotalBiomass, list(TotalForageBiomass=elkdata$used_factor), mean, na.rm=TRUE)
par(mfrow=c(1,2)) #this function plots the next two called plots next to each other
boxplot(Elevation~used_factor, #plot elevation by use / available
ylab="Elevation", #label for the y axis
xlab="USEDfactor", #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
boxplot(TotalBiomass~used_factor, #plot total biomass by use / available
ylab="Total Forage Biomass", #label for the y axis
xlab="USEDfactor",  #label for the x axis
data=elkdata) #data to use (with the columns named elevation and use_factor)
ggplot(
elkdata, #data to be used
aes(
x=landcover_type, #column in the dataframe with categorical data
fill=used_factor #compares summer to winter values
)
)+
geom_bar(
aes(
y=(..count..)/sum(..count..) #column in the dataframe with categorical data
#fill=as.factor(summer) # this equation plots the % use instead of frequency
)
)+
ggtitle("Elk Use and Availability of Different Landcover Variables") +
labs(x="Landcover Type",y="Density",fill = "")+
scale_fill_manual(labels = c("Available", "Used"), values = c("grey3", "grey50"))
par(mfrow=c(1,1)) ## note need to reset graphical parameter to 1x1
## first analyze data incorrectly using linear regression
naiveelevation <- lm(used~elevation, #specify the model-use (y-axis ie independent variable) as a function of elevation (x-axis ie independent variable)
data = elkdata) #data used to fit the model
summary(naiveelevation) #output of the model.
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation = seq(min(elkdata$elevation),max(elkdata$elevation),0.1) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
str(elkdata$elevation)
elkdata$elevation<-as.numeric(scale(elkdata$Elevation))
elkdata$totalbiomass<-as.numeric(scale(elkdata$TotalBiomass))
Elevation_model<-glm(used_factor~elevation, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
elevation = seq(min(elkdata$elevation),max(elkdata$elevation),0.1) #create a new elevation data which spreads from 0m to 4,000m by 10's
pred_elevation = predict(Elevation_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(elevation) #the new data we want the model to use to predict probability of use
)
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(0,4000), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(-4,4), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(-2,4), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(-2,5), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
plot(elkdata$elevation, #observed elevation
elkdata$used, #observed use (o or 1)
xlim=c(-2,4), #specify what elevations to plot
xlab="Elevation", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(elevation,#dependent variable (x-axis)
pred_elevation, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
Forage_model<-glm(used_factor~totalbiomass, #specify the model the effect of elevation on probability of use
data=elkdata, #specify the data set to use (must contain columns namedused_factor and elevation)
family=binomial(link="logit")) #specify the link function- remember the response in our data is 0 or 1 so this is a binomial probability and we will therefore use the logit function to force our linear predictors to be between 0-1
totalbiomass = seq(min(elkdata$totalbiomass,na.rm=T),max(elkdata$totalbiomass,na.rm=T),10) #create a new forage data which spreads from the minimum found in the data to the maximum found in the data by 10's
pred_totalbiomass = predict(Forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(totalbiomass) #the new data we want the model to use to predict probability of use
)
plot(elkdata$totalbiomass, #observed elevation
elkdata$used, #observed use (o or 1)
xlab="Total Biomass", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(totalbiomass,#dependent variable (x-axis)
pred_totalbiomass, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
totalbiomass = seq(min(elkdata$totalbiomass,na.rm=T),max(elkdata$totalbiomass,na.rm=T),10) #create a new forage data which spreads from the minimum found in the data to the maximum found in the data by 10's
pred_totalbiomass = predict(Forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(totalbiomass) #the new data we want the model to use to predict probability of use
)
plot(elkdata$totalbiomass, #observed elevation
elkdata$used, #observed use (o or 1)
xlab="Total Biomass", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(totalbiomass,#dependent variable (x-axis)
pred_totalbiomass, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
totalbiomass = seq(min(elkdata$totalbiomass,na.rm=T),max(elkdata$totalbiomass,na.rm=T),0.1) #create a new forage data which spreads from the minimum found in the data to the maximum found in the data by 10's
pred_totalbiomass = predict(Forage_model,#specify the model that we want to use to predict probability of use based on our new dataset
type="response", #we want the 'response' of the model
newdata = data.frame(totalbiomass) #the new data we want the model to use to predict probability of use
)
plot(elkdata$totalbiomass, #observed elevation
elkdata$used, #observed use (o or 1)
xlab="Total Biomass", #x-axis label
ylab="Pr(Use)") #y-axis label
lines(totalbiomass,#dependent variable (x-axis)
pred_totalbiomass, #indepedent variable (y-axis)
lty=1)#specify what kind of line we want (a solid line).
landcover_model<-glm(used_factor~landcover_type-1,
data=elkdata,
family=binomial(link="logit"))
landcover_model<-glm(used_factor~landcover_type-1,
data=elkdata,
family=binomial(link="logit"))
summary(landcover_model)
summary(Forage_model)
summary(Elevation_model)
